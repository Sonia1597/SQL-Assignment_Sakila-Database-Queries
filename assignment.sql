/*Q1.	Write a query to display the first name, last name, 
and rental date of all customers who rented a film. Use the customer and rental tables.*/

use sakila;
select c.first_name, c.last_name, r.rental_date 
from customer c
inner join
rental r
on c.customer_id = r.customer_id
order by r.rental_date;

/*Q2.	Write a query to display the first name, last name, 
and address of all customers whose district is either Alberta or Texas. Use the customer and address tables.*/
select c.first_name, c.last_name, a.address, a.district
from customer c
inner join
address a
on c.address_id = a.address_id
where a.district in ('Alberta', 'Texas');

/*Q3.	List all films along with their category names, including films that may not belong to any category. 
Then sort it by category names. Use the film, film_category and category tables.*/

select f.film_id, f.title as film_title, c.name as category_name
from film f
left join film_category fc
on f.film_id = fc.film_id
left join category c
on fc.category_id = c.category_id
order by category_name;

/*Q4.	 Display the number of rentals per store. Use the rental, inventory, and store tables.*/

select s.store_id, count(r.rental_id) as rental_count
from 
store s
join inventory i
on s.store_id = i.store_id
join rental r
on i.inventory_id = r.inventory_id
group by s.store_id;

/*Q5.	List the names of categories that have more than 50 films. Use table category and film_category.*/

select c.name as category_name, count(fc.film_id) as film_count
from 
category c
join film_category fc
on c.category_id = fc.category_id
group by
c.name
having film_count > 50;

/*Q6.	Write a query to display the film titles that have been rented by the customer named 'Mary Smith'. 
Use a subquery to get the customer ID.*/

select f.title as film_titles
from rental r
join inventory i
on r.inventory_id = i.inventory_id
join film f
on i.film_id = f.film_id
where
r.customer_id = (select customer_id from customer where first_name = 'Mary' and last_name = 'Smith');

/*Q7.	Write a query to display the total rental income generated by each film. Use film, inventory, 
rental and payment tables.*/

select f.title as film_title, sum(p.amount) as total_rental_income
from film f
inner join inventory i on f.film_id = i.film_id 
inner join rental r on i.inventory_id = r.inventory_id 
inner join payment p on r.rental_id = p.rental_id
group by f.title
order by total_rental_income desc;

/*Q8.	Write a query to display the total number of films each actor has acted in. Use actor, film_Actor tables.*/

select a.actor_id, concat(a.first_name,' ',a.last_name) as actor_name, count(fa.film_id) as total_films
from actor a
join film_actor fa
on a.actor_id = fa.actor_id
group by a.actor_id;

/*Q9.	Write a query to list all rentals with a case statement that displays 'New Customer' if the customer_id is greater 
than 300, and 'Regular Customer' otherwise. Use table rental.*/

select *,
	case 
		when customer_id > 300 then 'New Customer'
		else 'Regular Cusotmer'
	end as customer_type
from rental;

/*Q10.	Write a query to find all films with titles that start with the letter 'A'. Display the film title and the release year. 
Use film table and  inventory table.*/

select distinct f.title, f.release_year
from film f
join inventory i 
on f.film_id = i.film_id
where f.title like 'A%';

/*Q11. Create a new DB and perform below operations using SQL commands.
(a)	Create a table with 2 columns â€“ Student_ID, Marks*/

create database student_db;
use student_db;

create table student_marks
	(Student_ID int,
    Marks int);
    
-- (b)	Insert 2 records in this table.
insert into student_marks (Student_ID, Marks)
values (1,85), (2,90);

-- (c)	Rename the Marks column with Score.
alter table student_marks
change Marks Score int;
select * from student_marks;

-- (d)	Then delete the table.
drop table student_marks;

-- (e)	Then delete the Database.
drop database student_db;